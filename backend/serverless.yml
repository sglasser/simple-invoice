service:
  name: simple-invoice
# app and org for use with dashboard.serverless.com
#app: your-app-name
#org: your-org-name

custom:
  webpack:
    webpackConfig: ./webpack.config.js
    includeModules: true
  client:
    bucketName: simple-invoice-${self:provider.stage}
    distributionFolder: ../client/public
  documentation:
    api:
      info:
        version: v1.0.0
        title: Simple Invoice API
        description: Simple invoicing application
  apigwBinary:
    types:
      - '*/*'

plugins:
  - serverless-webpack
  - serverless-iam-roles-per-function
  - serverless-reqvalidator-plugin
  - serverless-aws-documentation
  - serverless-finch

provider:
  name: aws
  runtime: nodejs12.x
  stage: ${opt:stage, 'dev'}
  region: ${opt:region, 'us-east-2'}

  tracing:
    lambda: true
    apiGateway: true

  apiGateway:
    minimumCompressionSize: 1024 # Enable gzip compression for responses > 1 KB

  environment:
    AWS_NODEJS_CONNECTION_REUSE_ENABLED: 1
    INVOICE_TABLE: INVOICEV5-${self:provider.stage}
    USER_TABLE: USER-${self:provider.stage}
    RECIPIENT_TABLE: RECIPIENT-${self:provider.stage}
    INVOICE_S3_BUCKET: simple-invoice-${self:provider.stage}

  iamRoleStatements:
    - Effect: Allow
      Action:
        - codedeploy:*
      Resource:
        - '*'  
    - Effect: Allow
      Action:
        - "xray:PutTraceSegments"
        - "xray:PutTelemetryRecords"
      Resource:
        - "*"

functions:
  CreateInvoice:
    handler: src/lambda/http/create-invoice.handler
    events:
      - http:
          method: post
          path: invoice
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new invoice
            description: Create a new invoice
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.INVOICE_TABLE}

  GetInvoices:
    handler: src/lambda/http/get-invoices.handler
    events:
      - http:
          method: get
          path: invoice
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Get invoices
            description: Get invoices for user
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.INVOICE_TABLE}

  GetMaxInvoiceNumber:
    handler: src/lambda/http/get-max-invoice-number.handler
    events:
      - http:
          method: get
          path: max-invoice-number
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Get max invoice number used for a user
            description: Get max invoice number used for a user
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.INVOICE_TABLE}

  UpdateInvoice:
    handler: src/lambda/http/update-invoice.handler
    events:
      - http:
          method: patch
          path: invoice
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update an invoice
            description: Update an invoice
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.INVOICE_TABLE}

  CreateUser:
    handler: src/lambda/http/create-user.handler
    events:
      - http:
          method: post
          path: user
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a new user
            description: Create a new user
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  GetUser:
    handler: src/lambda/http/get-user.handler
    events:
      - http:
          method: get
          path: user
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Get user
            description: Get user
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  UpdateUser:
    handler: src/lambda/http/update-user.handler
    events:
      - http:
          method: patch
          path: user
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update user
            description: Update a user
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.USER_TABLE}

  CreateRecipient:
    handler: src/lambda/http/create-recipient.handler
    events:
      - http:
          method: post
          path: recipient
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Create a recipient
            description: Create a recipient
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:PutItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENT_TABLE}

  GetRecipients:
    handler: src/lambda/http/get-recipients.handler
    events:
      - http:
          method: get
          path: recipient
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Get recipients
            description: Get recipients
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:Query
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENT_TABLE}

  UpdateRecipient:
    handler: src/lambda/http/update-recipient.handler
    events:
      - http:
          method: patch
          path: recipient
          cors: true
          # authorizer: Auth
          # reqValidatorName: RequestBodyValidator
          documentation:
            summary: Update recipient
            description: Update recipient
            #requestModels:
              #'application/json': CreateRequest
    iamRoleStatementsInherit: true
    iamRoleStatements:
      - Effect: Allow
        Action:
          - dynamodb:UpdateItem
        Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.RECIPIENT_TABLE}

  CreatePDF:
    handler: src/lambda/http/create-invoice-pdf.handler
    events:
      - http:
          method: post
          path: invoice/pdf
          cors: true
          
resources:
  Resources:
    GatewayResponseDefault4XX:
      Type: AWS::ApiGateway::GatewayResponse
      Properties:
        ResponseParameters:
          gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
          gatewayresponse.header.Access-Control-Allow-Headers: "'*'"
          gatewayresponse.header.Access-Control-Allow-Methods: "'GET,OPTIONS,POST,PUT,DELETE'"
        ResponseType: DEFAULT_4XX
        RestApiId:
          Ref: ApiGatewayRestApi

    InvoiceTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: invoiceId
            AttributeType: S
          - AttributeName: invoiceNumber
            AttributeType: N
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: invoiceId
            KeyType: RANGE
        LocalSecondaryIndexes:
          - IndexName: MaxInvIndex
            KeySchema:
              - AttributeName: userId
                KeyType: HASH
              - AttributeName: invoiceNumber
                KeyType: RANGE
            Projection:
              ProjectionType: KEYS_ONLY
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.INVOICE_TABLE}

    UserTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.USER_TABLE}

    RecipientTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: recipientId
            AttributeType: S
          - AttributeName: userId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
          - AttributeName: recipientId
            KeyType: RANGE
        BillingMode: PAY_PER_REQUEST
        TableName: ${self:provider.environment.RECIPIENT_TABLE}


    # RequestBodyValidator:
    #   Type: AWS::ApiGateway::RequestValidator
    #   Properties:
    #     Name: 'request-body-validator'
    #     RestApiId:
    #       Ref: ApiGatewayRestApi
    #     ValidateRequestBody: true
    #     ValidateRequestParameters: false

    AttachmentsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:provider.environment.INVOICE_S3_BUCKET}
        CorsConfiguration:
          CorsRules:
            -
              AllowedOrigins:
                - '*'
              AllowedHeaders:
                - '*'
              AllowedMethods:
                - GET
                - PUT
                - POST
                - DELETE
                - HEAD
              MaxAge: 3000

    BucketPolicy:
      Type: AWS::S3::BucketPolicy
      Properties:
        PolicyDocument:
          Id: MyPolicy
          Version: "2012-10-17"
          Statement:
            - Sid: PublicReadForGetBucketObjects
              Effect: Allow
              Principal: '*'
              Action: 
                - 's3:GetObject'
              Resource: 'arn:aws:s3:::${self:provider.environment.INVOICE_S3_BUCKET}/*'
        Bucket: !Ref AttachmentsBucket   
